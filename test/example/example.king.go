package king_example

import (
	"github.com/altipla-consulting/king/runtime"
	common "github.com/altipla-consulting/king/test/common"
	"github.com/golang/protobuf/proto"
	"golang.org/x/net/context"
)

// Code generated by protoc-gen-king_go 1.0.0, DO NOT EDIT.
// Source: test/example/example.proto

type ContactMessagesServiceServer interface {
	Foo(ctx context.Context, in *FooRequest) (out *common.Empty, err error)
	Bar(ctx context.Context, in *BarRequest) (out *common.Empty, err error)
}

func RegisterContactMessagesService(server ContactMessagesServiceServer) {
	serviceDef := &runtime.Service{
		Name: "king.example.ContactMessagesService",
		Methods: []*runtime.Method{

			{
				Name:  "Foo",
				Input: func() proto.Message { return new(FooRequest) },
				Handler: func(ctx context.Context, in proto.Message) (proto.Message, error) {
					return server.Foo(ctx, in.(*FooRequest))
				},
			},

			{
				Name:  "Bar",
				Input: func() proto.Message { return new(BarRequest) },
				Handler: func(ctx context.Context, in proto.Message) (proto.Message, error) {
					return server.Bar(ctx, in.(*BarRequest))
				},
			},
		},
	}
	runtime.Services = append(runtime.Services, serviceDef)
}

type ContactMessagesServiceClient interface {
	Foo(ctx context.Context, in *FooRequest) (out *common.Empty, err error)
	Bar(ctx context.Context, in *BarRequest) (out *common.Empty, err error)
}

type clientImplContactMessagesService struct {
	caller *runtime.ClientCaller
}

func NewContactMessagesServiceClient(server string, opts ...runtime.ClientOption) ContactMessagesServiceClient {
	impClient := &clientImplContactMessagesService{
		caller: &runtime.ClientCaller{
			Server: server,
		},
	}

	for _, opt := range opts {
		opt(impClient.caller)
	}

	return impClient
}

func (impl *clientImplContactMessagesService) Foo(ctx context.Context, in *FooRequest) (out *common.Empty, err error) {
	out = new(common.Empty)
	if err := impl.caller.Call(ctx, "king.example.ContactMessagesService", "Foo", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (impl *clientImplContactMessagesService) Bar(ctx context.Context, in *BarRequest) (out *common.Empty, err error) {
	out = new(common.Empty)
	if err := impl.caller.Call(ctx, "king.example.ContactMessagesService", "Bar", in, out); err != nil {
		return nil, err
	}

	return out, nil
}
