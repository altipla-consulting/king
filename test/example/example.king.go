package example

import (
	"github.com/altipla-consulting/king/runtime"
	common "github.com/altipla-consulting/king/test/common"
	"github.com/juju/errors"
	"golang.org/x/net/context"
)

// Code generated by protoc-gen-king_go 1.0.0, DO NOT EDIT.
// Source: test/example/example.proto

type ContactMessagesServiceServer interface {
	Foo(ctx context.Context, in *FooRequest) (out *common.Empty, err error)
	Bar(ctx context.Context, in *BarRequest) (out *common.Empty, err error)
}

func RegisterContactMessagesServiceServer(server ContactMessagesServiceServer) {
	serviceDef := &runtime.Service{
		Name: "king.test.example.ContactMessagesService",
		Methods: []*runtime.Method{

			{
				Name: "Foo",
				Handler: func(ctx context.Context, inCodec, outCodec runtime.Codec, inHook, outHook runtime.Hook) error {
					in := new(FooRequest)
					if err := inCodec.Decode(in); err != nil {
						return errors.Trace(err)
					}
					if err := inHook(in); err != nil {
						return errors.Trace(err)
					}

					out, err := server.(*clientImplContactMessagesService).Foo(ctx, in)
					if err != nil {
						return errors.Trace(err)
					}

					if err := outHook(out); err != nil {
						return errors.Trace(err)
					}
					if err := outCodec.Encode(out); err != nil {
						return errors.Trace(err)
					}

					return nil
				},
			},

			{
				Name: "Bar",
				Handler: func(ctx context.Context, inCodec, outCodec runtime.Codec, inHook, outHook runtime.Hook) error {
					in := new(BarRequest)
					if err := inCodec.Decode(in); err != nil {
						return errors.Trace(err)
					}
					if err := inHook(in); err != nil {
						return errors.Trace(err)
					}

					out, err := server.(*clientImplContactMessagesService).Bar(ctx, in)
					if err != nil {
						return errors.Trace(err)
					}

					if err := outHook(out); err != nil {
						return errors.Trace(err)
					}
					if err := outCodec.Encode(out); err != nil {
						return errors.Trace(err)
					}

					return nil
				},
			},
		},
	}
	runtime.Services = append(runtime.Services, serviceDef)
}

type ContactMessagesServiceClient interface {
	Foo(ctx context.Context, in *FooRequest) (out *common.Empty, err error)
	Bar(ctx context.Context, in *BarRequest) (out *common.Empty, err error)
}

type clientImplContactMessagesService struct {
	server string
}

func NewContactMessagesServiceClient(server string) ContactMessagesServiceClient {
	return &clientImplContactMessagesService{server}
}

func (impl *clientImplContactMessagesService) Foo(ctx context.Context, in *FooRequest) (out *common.Empty, err error) {
	out = new(common.Empty)
	if err := runtime.ClientCall(ctx, impl.server, "king.test.example.ContactMessagesService", "Foo", in, out); err != nil {
		return nil, errors.Trace(err)
	}

	return out, nil
}

func (impl *clientImplContactMessagesService) Bar(ctx context.Context, in *BarRequest) (out *common.Empty, err error) {
	out = new(common.Empty)
	if err := runtime.ClientCall(ctx, impl.server, "king.test.example.ContactMessagesService", "Bar", in, out); err != nil {
		return nil, errors.Trace(err)
	}

	return out, nil
}
